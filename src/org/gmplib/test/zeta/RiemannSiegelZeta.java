package org.gmplib.test.zeta;

import java.util.ArrayList;

import org.gmplib.gmpjni.GMP;
import org.gmplib.gmpjni.MPFR;
import org.gmplib.gmpjni.MPFR.MPFRException;
import org.gmplib.gmpjni.MPFR.mpfr_rnd_t;
import org.gmplib.gmpjni.MPFR.mpfr_t;

public class RiemannSiegelZeta implements RiemannZeta {

    private StringBuffer zeroStr[];
    private int thetaEvals;
    private int zetaEvals;
    private int precision;
    private int digits; // precision in decimal digits
    private int numZeroes;
    
    private mpfr_t pi;
    private mpfr_t piby2;
    private mpfr_t piby8;
    private mpfr_t log2;
    private int numGramPoints = 0;
    private int gramBaseIndex = -1;
    private mpfr_t[] gramPoints; // gramPoints[i] is g(gramBaseIndex + i)
    private mpfr_t[] logs; // logs[i] is ln(i+1)
    private mpfr_t[] sqrts; // sqrts[i] is sqrt(i+1)
    private mpfr_t epsilon; // 1 / 2^(precision-2)
    private static final int[] Bnums = new int[] {1, 1, 1,  1,  1,  5,  691,  7, 3617, 43867, 174611, 854513}; // numerators of abs(B(2n))
    //                                      -  -  -   --  --  --  ----  -  ----  -----  ------  ------
    private static final int[] Bdens = new int[] {1, 6, 30, 42, 30, 66, 2730, 6, 510,  798,   330,    138   }; // denominators of abs(B(2n))
    private mpfr_t[] C; // coefficients for theta
    private mpfr_t[] tpowers; // used in theta
    private static final String[][] c_strs =
    {
	    {
	    "0.38268 34323 65089 77172 84599 84030 39886 67613 44562 48563",
	    "0.43724 04680 77520 44936 02964 67371 33198 70730 41501 04236",
	    "0.13237 65754 80343 52332 40352 67391 51055 54743 22995 55867",
	   "-0.01360 50260 47674 18865 49831 88709 09990 76607 06870 27422",
	   "-0.01356 76219 70103 58088 79156 70583 49920 61860 29596 96188",
	   "-0.00162 37253 23144 46528 28546 25294 13364 97256 59201 71817",
	    "0.00029 70535 37333 79690 78312 72833 99515 86690 67933 33345",
	    "0.00007 94330 08795 21469 58801 63902 64879 50144 87309 91526",
	    "0.00000 04655 61246 14504 50503 70634 02160 34762 31240 41457",
	   "-0.00000 14327 25163 09551 05754 08246 31206 26158 88246 25803",
	   "-0.00000 01035 48471 12312 94607 50074 15677 38403 49888 27246",
	    "0.00000 00123 57927 08386 17380 56125 76262 31253 03165 10118",
	    "0.00000 00017 88108 38579 54904 98566 67814 07069 04566 45456",
	   "-0.00000 00000 33914 14389 92703 59069 40621 89788 44556 15248",
	   "-0.00000 00000 16326 63390 25659 05101 37405 29710 48102 81346",
	   "-0.00000 00000 00378 51093 18541 22038 28546 47200 18504 50264",
	    "0.00000 00000 00093 27423 25920 17248 45662 32063 98698 63600",
	    "0.00000 00000 00005 22184 30159 78136 85531 38931 47853 02371",
	   "-0.00000 00000 00000 33506 73072 74426 37895 15090 35794 73261",
	   "-0.00000 00000 00000 03412 42652 28117 26494 08098 71045 62059",
	    "0.00000 00000 00000 00057 51203 34143 23991 60339 50179 51646",
	    "0.00000 00000 00000 00014 89530 13632 11505 45475 62777 57347",
	    "0.00000 00000 00000 00000 12565 37271 70214 16853 30428 17661",
	   "-0.00000 00000 00000 00000 04721 29525 01434 25668 95398 81367",
	   "-0.00000 00000 00000 00000 00132 69069 36303 96199 92735 41309",
	    "0.00000 00000 00000 00000 00011 05343 99951 21418 34453 78225",
	    "0.00000 00000 00000 00000 00000 54996 46377 52746 55111 40104",
	   "-0.00000 00000 00000 00000 00000 01823 13765 02318 02628 06411",
	   "-0.00000 00000 00000 00000 00000 00156 89403 73772 08801 46868",
	    "0.00000 00000 00000 00000 00000 00001 58396 35088 23801 16107",
	    "0.00000 00000 00000 00000 00000 00000 34346 20725 43720 40220",
	    "0.00000 00000 00000 00000 00000 00000 00170 21033 50031 70178",
	   "-0.00000 00000 00000 00000 00000 00000 00059 95119 30495 78167",
	   "-0.00000 00000 00000 00000 00000 00000 00001 04876 82754 09445",
	    "0.00000 00000 00000 00000 00000 00000 00000 08422 13517 83493",
	    "0.00000 00000 00000 00000 00000 00000 00000 00258 47038 59772",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00009 34763 93749",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 45694 19225",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00754 55974",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00064 61816",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 27882",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 07609",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00038",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00008"
	    },
	    {
	    "0.02682 51026 28375 34702 99914 03955 66674 96592 70472 43064",
	   "-0.01378 47734 26351 85304 98704 52589 89616 23659 48225 59753",
	   "-0.03849 12504 82235 08222 87364 15363 18936 68960 98807 49451",
	   "-0.00987 10662 99062 07647 20121 47046 18854 06928 04214 59667",
	    "0.00331 07597 60858 40433 29090 76951 30069 78028 02091 85612",
	    "0.00146 47808 57795 41508 24977 96561 98311 19780 77545 77229",
	    "0.00001 32079 40624 87696 36751 61447 49443 09678 24291 83541",
	   "-0.00005 92274 87018 47141 32322 34995 28189 56840 68029 12492",
	   "-0.00000 59802 42585 37344 85877 10835 07451 58584 19335 89017",
	    "0.00000 09641 32245 61698 26352 67298 53298 51666 87570 78366",
	    "0.00000 01833 47337 22714 41176 00167 93657 83221 90807 53603",
	   "-0.00000 00044 67087 56271 78335 99560 79422 71505 51934 65747",
	   "-0.00000 00027 09635 08217 72743 21692 62839 87091 93725 93160",
	   "-0.00000 00000 77852 88654 31585 10462 94823 08520 96100 06728",
	    "0.00000 00000 23437 62601 08936 88532 48455 04871 04512 27313",
	    "0.00000 00000 01583 01727 89987 52164 21622 26426 28742 11967",
	   "-0.00000 00000 00121 19941 57372 37912 46646 34473 80175 72576",
	   "-0.00000 00000 00014 58378 11611 08307 01758 28548 16989 99317",
	    "0.00000 00000 00000 28786 30525 81319 17504 55821 28002 08761",
	    "0.00000 00000 00000 08662 86290 21237 24122 52825 28879 33104",
	    "0.00000 00000 00000 00084 30722 72713 70412 71560 02253 14627",
	   "-0.00000 00000 00000 00036 30807 22309 73462 00173 24618 11033",
	   "-0.00000 00000 00000 00001 16266 98212 83829 67194 13888 62925",
	    "0.00000 00000 00000 00000 10975 48671 15275 31815 90183 28340",
	    "0.00000 00000 00000 00000 00615 73990 20468 42710 38814 70791",
	   "-0.00000 00000 00000 00000 00022 90928 00676 78471 51396 38263",
	   "-0.00000 00000 00000 00000 00002 20328 11748 84879 53437 95983",
	    "0.00000 00000 00000 00000 00000 02476 02518 00402 78508 28527",
	    "0.00000 00000 00000 00000 00000 00595 42772 15583 65780 22727",
	    "0.00000 00000 00000 00000 00000 00003 26120 20746 79595 26153",
	   "-0.00000 00000 00000 00000 00000 00001 26540 35591 04116 22437",
	   "-0.00000 00000 00000 00000 00000 00000 02431 28469 65496 98190",
	    "0.00000 00000 00000 00000 00000 00000 00213 83011 38754 69537",
	    "0.00000 00000 00000 00000 00000 00000 00007 16779 94139 41062",
	   "-0.00000 00000 00000 00000 00000 00000 00000 28242 93607 23367",
	   "-0.00000 00000 00000 00000 00000 00000 00000 01500 60741 96069",
	    "0.00000 00000 00000 00000 00000 00000 00000 00026 87318 94053",
	    "0.00000 00000 00000 00000 00000 00000 00000 00002 49041 95008",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 01160 53898",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00341 37546",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00001 82473",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 39328",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00562",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00038",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00001"
	    },
	    {
	    "0.00518 85428 30293 16849 37845 81519 23095 95659 68684 33791",
	    "0.00030 94658 38806 34746 03345 67436 09587 88236 69500 30795",
	   "-0.01133 59410 78229 37338 21824 35255 88351 34102 49474 89026",
	    "0.00223 30457 41958 14477 20571 25527 58036 81570 98397 99816",
	    "0.00519 66374 08862 33020 51169 26953 06819 18885 15832 10762",
	    "0.00034 39914 40762 08336 69465 59135 79918 09598 41858 90021",
	   "-0.00059 10648 42747 05828 21732 25230 30773 95276 58837 56102",
	   "-0.00010 22997 25479 35857 45442 78675 22727 78713 39437 47273",
	    "0.00002 08883 92216 99275 54080 73296 17417 54159 31186 30536",
	    "0.00000 59276 65493 09653 59578 91996 48498 28633 35742 24986",
	   "-0.00000 01642 38383 62436 27597 76903 02847 78378 04961 61213",
	   "-0.00000 01516 11997 00940 68286 17346 05397 18738 16600 81084",
	   "-0.00000 00059 07803 69820 66679 62922 79025 39789 62060 71628",
	    "0.00000 00020 91151 48594 78188 97774 55551 89722 58039 58857",
	    "0.00000 00001 78156 49583 29235 10537 99701 87884 74866 56010",
	   "-0.00000 00000 16164 07245 53538 30752 85576 94444 73857 77680",
	   "-0.00000 00000 02380 69624 96667 61570 72107 40380 13584 97816",
	    "0.00000 00000 00053 98265 29554 25949 18182 00414 83368 22987",
	    "0.00000 00000 00019 75014 21969 69515 27330 87335 88451 72519",
	    "0.00000 00000 00000 23332 86873 28826 34831 04815 30059 23548",
	   "-0.00000 00000 00000 11187 51761 00480 80208 20048 38089 71616",
	   "-0.00000 00000 00000 00416 40094 88883 76718 85011 22836 43331",
	    "0.00000 00000 00000 00044 46081 10929 18830 28903 04350 09287",
	    "0.00000 00000 00000 00002 85461 14783 63714 45457 33874 26978",
	   "-0.00000 00000 00000 00000 11913 23143 00378 94304 97184 75053",
	   "-0.00000 00000 00000 00000 01298 16343 60736 49894 67099 02313",
	    "0.00000 00000 00000 00000 00016 12376 31780 33262 33877 96587",
	    "0.00000 00000 00000 00000 00004 38249 75198 87344 05965 52584",
	    "0.00000 00000 00000 00000 00000 02718 63895 76555 75913 88204",
	   "-0.00000 00000 00000 00000 00000 01145 88965 06774 58036 97439",
	   "-0.00000 00000 00000 00000 00000 00024 41531 81819 27522 97891",
	    "0.00000 00000 00000 00000 00000 00002 35056 75086 79043 46067",
	    "0.00000 00000 00000 00000 00000 00000 08669 25899 56212 98718",
	   "-0.00000 00000 00000 00000 00000 00000 00372 39779 85489 46268",
	   "-0.00000 00000 00000 00000 00000 00000 00021 64603 32663 21799",
	    "0.00000 00000 00000 00000 00000 00000 00000 42034 57751 93556",
	    "0.00000 00000 00000 00000 00000 00000 00000 04244 05249 48043",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00021 23139 27539",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00006 81349 63731",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 03954 73207",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00912 11999",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00014 05333",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00001 02240",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 02613",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00095",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00004"
	    },
	    {
	    "0.00133 97160 90719 45690 42698 35729 94522 81238 56353 95317",
	   "-0.00374 42151 36379 39370 46641 61864 46239 65812 84315 04245",
	    "0.00133 03178 91932 14681 20318 54722 40241 05098 97088 24610",
	    "0.00226 54660 76547 17871 14760 31990 52100 68874 11951 34489",
	   "-0.00095 48499 99850 67304 15112 25515 76501 13355 10463 76633",
	   "-0.00060 10038 45896 36039 12075 80587 57956 11286 93255 59075",
	    "0.00010 12885 82867 76621 95334 43494 18087 85828 88131 81267",
	    "0.00006 86573 34492 99825 64245 74283 64865 21853 43285 92530",
	   "-0.00000 05985 36679 15385 98159 30593 38532 89474 47603 32543",
	   "-0.00000 33316 59851 23994 71290 43553 66983 83079 31712 85955",
	   "-0.00000 02191 92891 02435 08105 71848 42192 25369 44570 56301",
	    "0.00000 00789 08842 45681 49441 05552 48261 56888 52335 34195",
	    "0.00000 00094 14685 08129 52621 51652 46515 67088 87214 34441",
	   "-0.00000 00009 57011 62108 83480 30188 07228 47736 89941 49204",
	   "-0.00000 00001 87631 37453 47066 27968 12970 57776 33187 71497",
	    "0.00000 00000 04437 83767 93233 99327 46470 89849 67982 03943",
	    "0.00000 00000 02242 67385 05617 35324 84110 68573 06374 39088",
	    "0.00000 00000 00036 27686 86573 52436 89408 25563 79232 00993",
	   "-0.00000 00000 00017 63980 95508 21581 60783 11214 98067 40561",
	   "-0.00000 00000 00000 79607 65246 78677 77572 90345 17927 78777",
	    "0.00000 00000 00000 09419 65149 05896 90763 91489 50256 94424",
	    "0.00000 00000 00000 00713 31038 54569 65782 45566 67924 63721",
	   "-0.00000 00000 00000 00032 89910 58455 46243 21179 66525 84927",
	   "-0.00000 00000 00000 00004 18073 03748 98459 29136 29248 70562",
	    "0.00000 00000 00000 00000 05550 54207 16463 33789 78211 64027",
	    "0.00000 00000 00000 00000 01787 04419 06260 12385 87176 36353",
	    "0.00000 00000 00000 00000 00013 31280 39646 56094 28629 73430",
	   "-0.00000 00000 00000 00000 00005 81861 06110 90987 51617 92166",
	   "-0.00000 00000 00000 00000 00000 14019 03608 85265 55374 36497",
	    "0.00000 00000 00000 00000 00000 01464 13202 11626 25414 89978",
	    "0.00000 00000 00000 00000 00000 00060 23326 55108 91423 18945",
	   "-0.00000 00000 00000 00000 00000 00002 80644 72319 11360 74804",
	   "-0.00000 00000 00000 00000 00000 00000 18065 06005 59245 48468",
	    "0.00000 00000 00000 00000 00000 00000 00377 95083 31934 08111",
	    "0.00000 00000 00000 00000 00000 00000 00042 14558 05294 75628",
	   "-0.00000 00000 00000 00000 00000 00000 00000 22110 61928 33988",
	   "-0.00000 00000 00000 00000 00000 00000 00000 07977 85719 14915",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00051 34879 81542",
	    "0.00000 00000 00000 00000 00000 00000 00000 00012 48640 63022",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 20921 85069",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 01623 63775",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00044 84110",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00001 73507",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 07222",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00146",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00010"
	    },
	    {
	    "0.00046 48338 93617 63381 85363 04625 59567 24354 48586 06911",
	   "-0.00100 56607 36534 04707 59778 84972 86295 36576 07524 47568",
	    "0.00024 04485 65737 25793 02244 56678 29485 74707 79638 60162",
	    "0.00102 83086 14970 23218 78262 98312 61578 75598 86311 79072",
	   "-0.00076 57861 07175 56441 86599 81580 00799 92688 20944 84998",
	   "-0.00020 36528 68030 84817 62148 43874 94623 41995 34626 99416",
	    "0.00023 21229 04910 68727 89513 61265 01723 19707 47803 60658",
	    "0.00003 26021 44243 86519 76077 37788 36663 42848 22539 48214",
	   "-0.00002 55790 62517 94952 51402 46040 07009 94523 16332 03060",
	   "-0.00000 41074 64438 91574 47539 81958 90466 42973 86565 39030",
	    "0.00000 11781 11364 03712 93881 30076 99193 24036 74756 38687",
	    "0.00000 02445 65614 22484 57854 23157 09490 27874 00696 06211",
	   "-0.00000 00239 15824 76734 43224 30329 40478 52236 76188 61144",
	   "-0.00000 00075 05214 20703 57552 88539 12019 60449 88740 19466",
	    "0.00000 00001 33122 79416 25842 81929 10105 59867 09920 47183",
	    "0.00000 00001 34406 26754 22561 97186 98076 43428 79957 14390",
	    "0.00000 00000 03513 77004 24304 85928 69350 05579 88954 29774",
	   "-0.00000 00000 01519 15445 33703 91933 57444 24987 63088 97131",
	   "-0.00000 00000 00089 15417 68144 70873 05494 78654 49999 29733",
	    "0.00000 00000 00011 19589 11652 28535 77323 21347 49080 58074",
	    "0.00000 00000 00001 05160 13329 91481 49636 67704 81655 19743",
	   "-0.00000 00000 00000 05178 65527 36466 83661 53813 02984 65863",
	   "-0.00000 00000 00000 00806 58748 61916 56605 15372 90544 25379",
	    "0.00000 00000 00000 00010 60820 45305 63965 95048 11473 94417",
	    "0.00000 00000 00000 00004 43368 06742 99408 72779 24815 58327",
	    "0.00000 00000 00000 00000 04320 05114 70350 15243 49603 07768",
	   "-0.00000 00000 00000 00000 01823 03892 29596 89330 54205 22677",
	   "-0.00000 00000 00000 00000 00051 19936 91748 32861 03251 58521",
	    "0.00000 00000 00000 00000 00005 69501 09195 37824 74735 00907",
	    "0.00000 00000 00000 00000 00000 26690 65454 89392 07244 27408",
	   "-0.00000 00000 00000 00000 00000 01333 26298 64098 15112 18979",
	   "-0.00000 00000 00000 00000 00000 00096 85109 54821 70732 19219",
	    "0.00000 00000 00000 00000 00000 00002 15253 81124 57602 51413",
	    "0.00000 00000 00000 00000 00000 00000 27096 19871 79632 54227",
	   "-0.00000 00000 00000 00000 00000 00000 00142 20203 56757 83595",
	   "-0.00000 00000 00000 00000 00000 00000 00060 92794 84017 58935",
	   "-0.00000 00000 00000 00000 00000 00000 00000 44916 13060 57492",
	    "0.00000 00000 00000 00000 00000 00000 00000 11225 20689 24698",
	    "0.00000 00000 00000 00000 00000 00000 00000 00207 42966 35345",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00017 03585 64578",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 51354 56999",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 02107 51424",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00095 26704",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00002 03596",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 14396",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00131",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00018"
	    },
	    {
	   "-0.00011 34340 59228 68681 58827 89786 22736 30105 22768 18413",
	   "-0.00013 85155 85671 47985 11219 83406 60473 59129 54479 06908",
	    "0.00050 68306 01735 94034 57526 51330 83952 90098 28198 76511",
	   "-0.00041 22268 28546 77669 24003 22395 75379 70772 16031 22262",
	   "-0.00005 02125 03923 89304 68611 33009 98232 85900 88004 62547",
	    "0.00018 58333 02933 62498 66427 53866 44602 36078 73138 96532",
	   "-0.00002 75048 68033 01063 88219 93319 07939 21787 84629 41549",
	   "-0.00003 15691 32435 59332 80063 79547 01458 39659 32875 89769",
	    "0.00000 42177 25904 12201 97981 94005 98882 55782 08866 90245",
	    "0.00000 29158 99780 47906 36055 51463 54130 11298 76532 39676",
	   "-0.00000 01565 37849 55844 68062 97453 25753 24030 83645 99484",
	   "-0.00000 01465 21355 93176 92592 60207 41610 48857 87876 46533",
	   "-0.00000 00012 20015 86506 11429 90198 51976 36194 13186 65882",
	    "0.00000 00041 61924 47590 97839 47671 64265 92800 11205 30751",
	    "0.00000 00002 09398 12749 73436 33264 08788 16993 67138 15718",
	   "-0.00000 00000 70839 55086 67248 85205 25367 99796 34999 37810",
	   "-0.00000 00000 06023 00144 44422 42831 01924 87093 90509 30131",
	    "0.00000 00000 00745 41536 44214 17556 59928 98761 90526 79952",
	    "0.00000 00000 00094 32313 17363 54683 70257 25080 65858 15943",
	   "-0.00000 00000 00004 63034 20856 22329 75611 90110 02523 48234",
	   "-0.00000 00000 00000 96376 05904 06208 17943 39665 67623 56119",
	    "0.00000 00000 00000 01044 94028 45048 07270 93663 66465 72605",
	    "0.00000 00000 00000 00693 87245 20141 27039 12210 28293 46941",
	    "0.00000 00000 00000 00009 73300 20965 69540 47245 29578 55607",
	   "-0.00000 00000 00000 00003 66298 72527 67677 77079 46994 67508",
	   "-0.00000 00000 00000 00000 12513 20911 93576 37011 34566 44686",
	    "0.00000 00000 00000 00000 01440 44164 68986 79032 04974 33720",
	    "0.00000 00000 00000 00000 00079 26953 53722 21720 69969 47117",
	   "-0.00000 00000 00000 00000 00004 16125 26928 83910 39027 55847",
	   "-0.00000 00000 00000 00000 00000 35064 81184 11847 40816 69279",
	    "0.00000 00000 00000 00000 00000 00807 72511 64436 28936 26811",
	    "0.00000 00000 00000 00000 00000 00118 65496 28222 66413 63465",
	   "-0.00000 00000 00000 00000 00000 00000 56844 10036 47862 51213",
	   "-0.00000 00000 00000 00000 00000 00000 31957 27571 11389 34715",
	   "-0.00000 00000 00000 00000 00000 00000 00281 35861 65198 21126",
	    "0.00000 00000 00000 00000 00000 00000 00069 83511 21565 27962",
	    "0.00000 00000 00000 00000 00000 00000 00001 45059 53781 82417",
	   "-0.00000 00000 00000 00000 00000 00000 00000 12452 92818 47399",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00415 45871 96236",
	    "0.00000 00000 00000 00000 00000 00000 00000 00017 93359 26609",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 89127 35667",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 01996 07660",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00155 02991",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00001 44958",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 22618",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00006",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00028"
	    },
	    {
	    "0.00003 36909 98401 08093 44136 20678 22587 54937 50667 29535",
	   "-0.00012 18259 68193 43516 20073 75811 80582 57108 14090 80213",
	    "0.00021 82065 07195 05932 90108 76687 07195 58710 43933 99616",
	   "-0.00016 61903 34544 13336 07987 31060 67058 57629 57822 92267",
	   "-0.00003 11017 68990 16764 91333 06866 60985 90626 04685 57544",
	    "0.00012 08581 60387 56387 07965 51661 78237 49872 84433 27028",
	   "-0.00004 51514 67836 45519 76002 16599 45041 02192 34493 68008",
	   "-0.00001 85507 69189 25753 67883 58420 91314 65567 97070 84239",
	    "0.00001 16162 61484 36833 43412 15116 41822 44127 44386 47230",
	    "0.00000 15516 05441 49658 66781 24739 82293 18869 62729 05506",
	   "-0.00000 11731 83613 63808 71720 54823 51231 34639 63446 55226",
	   "-0.00000 01220 14066 11672 69259 65313 88262 15561 42353 19829",
	    "0.00000 00593 80910 48879 94930 94671 77027 68619 66740 18316",
	    "0.00000 00070 11997 12781 02855 40130 94452 92091 73757 07113",
	   "-0.00000 00016 44509 23596 55028 87466 36279 98073 09951 63456",
	   "-0.00000 00002 41384 77920 12176 97120 10994 16749 95237 90405",
	    "0.00000 00000 25885 38684 31000 59583 28356 39452 81440 14427",
	    "0.00000 00000 05119 28726 13950 29702 36382 76445 86691 02474",
	   "-0.00000 00000 00215 41595 75890 43037 79022 10401 36624 72901",
	   "-0.00000 00000 00071 34227 45268 88686 13680 81052 28024 43091",
	    "0.00000 00000 00000 28785 59793 41037 86337 49755 82766 24804",
	    "0.00000 00000 00000 68835 13880 94569 19766 05466 99368 43823",
	    "0.00000 00000 00000 01520 89144 46850 87860 86798 04771 69628",
	   "-0.00000 00000 00000 00476 01981 56157 08478 69784 90867 97549",
	   "-0.00000 00000 00000 00020 92936 37719 49331 32438 20743 86131",
	    "0.00000 00000 00000 00002 39509 48998 13892 50376 25236 34232",
	    "0.00000 00000 00000 00000 16148 54204 56593 67042 15194 53628",
	   "-0.00000 00000 00000 00000 00863 15037 45144 02735 17323 23128",
	   "-0.00000 00000 00000 00000 00087 81620 21965 79613 28562 12662",
	    "0.00000 00000 00000 00000 00002 01083 21744 88831 40852 19580",
	    "0.00000 00000 00000 00000 00000 36290 30130 77154 85180 51335",
	   "-0.00000 00000 00000 00000 00000 00128 36343 99509 37283 79806",
	   "-0.00000 00000 00000 00000 00000 00118 17355 69449 26816 47538",
	   "-0.00000 00000 00000 00000 00000 00001 30331 65813 27349 25928",
	    "0.00000 00000 00000 00000 00000 00000 30893 16181 68325 44781",
	    "0.00000 00000 00000 00000 00000 00000 00739 21756 51189 81502",
	   "-0.00000 00000 00000 00000 00000 00000 00065 21021 45398 58813",
	   "-0.00000 00000 00000 00000 00000 00000 00002 45187 75229 48499",
	    "0.00000 00000 00000 00000 00000 00000 00000 10997 02970 04791",
	    "0.00000 00000 00000 00000 00000 00000 00000 00610 83379 65164",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00014 14846 93326",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00001 22902 21003",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 01155 30599",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00206 27766",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 16463",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 29366",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00276",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00036",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00001"
	    },
	    {
	   "-0.00003 30623 99591 39952 29024 87318 67166 56535 46126 55816",
	    "0.00005 58380 11971 67341 67188 25883 67807 70276 81352 19371",
	   "-0.00003 38757 25212 77910 17489 14931 87425 42028 05779 11763",
	   "-0.00003 92854 99154 42035 92030 93457 47011 47071 04055 24728",
	    "0.00007 59013 38897 08718 86441 75960 64660 85961 55637 56359",
	   "-0.00003 76365 07526 41637 07541 13099 18865 92185 96404 10930",
	   "-0.00000 77587 52128 98363 87786 77788 58804 21375 74674 71491",
	    "0.00001 24346 81009 03170 13854 62920 03156 97472 02285 22504",
	   "-0.00000 13758 66097 40895 38622 58184 27541 54644 28908 06487",
	   "-0.00000 15381 43632 05079 13348 05096 83866 74352 37943 86927",
	    "0.00000 02469 23352 16114 25500 28981 11363 41554 60802 12002",
	    "0.00000 01130 37488 41071 98166 87702 48571 03849 93083 27545",
	   "-0.00000 00140 65380 57682 03288 62357 68785 27784 22995 94048",
	   "-0.00000 00053 30220 99943 13446 47873 31522 07126 76247 57168",
	    "0.00000 00003 59428 35262 85034 03526 62845 84527 72829 84714",
	    "0.00000 00001 60914 68843 19826 04928 46417 33661 89535 13512",
	   "-0.00000 00000 03405 39843 55486 28691 57518 47323 62007 67527",
	   "-0.00000 00000 03175 02449 60695 34155 64297 79074 84549 67918",
	   "-0.00000 00000 00038 62417 13739 06374 27781 37102 34036 30784",
	    "0.00000 00000 00042 37052 71361 14640 21794 42549 53403 62355",
	    "0.00000 00000 00001 59919 33724 67790 45570 54455 23960 23808",
	   "-0.00000 00000 00000 39390 48539 22384 81800 24475 70772 53182",
	   "-0.00000 00000 00000 02400 16399 71157 29383 28357 36848 56489",
	    "0.00000 00000 00000 00258 60510 85421 68898 16717 50238 85233",
	    "0.00000 00000 00000 00022 70087 14433 08317 32323 82108 18990",
	   "-0.00000 00000 00000 00001 17488 73138 45793 16253 26962 16207",
	   "-0.00000 00000 00000 00000 15334 67272 36759 85446 12061 66150",
	    "0.00000 00000 00000 00000 00323 75436 58260 73211 61926 95556",
	    "0.00000 00000 00000 00000 00078 27127 90820 78112 11950 09775",
	   "-0.00000 00000 00000 00000 00000 07444 47157 21113 12244 32002",
	   "-0.00000 00000 00000 00000 00000 31151 34644 40512 30502 01487",
	   "-0.00000 00000 00000 00000 00000 00452 18515 97017 93803 81976",
	    "0.00000 00000 00000 00000 00000 00098 37527 95687 74038 90560",
	    "0.00000 00000 00000 00000 00000 00002 79509 19701 42493 76037",
	   "-0.00000 00000 00000 00000 00000 00000 24785 25849 80959 63219",
	   "-0.00000 00000 00000 00000 00000 00000 01075 12538 89274 85989",
	    "0.00000 00000 00000 00000 00000 00000 00049 25301 24764 37445",
	    "0.00000 00000 00000 00000 00000 00000 00003 12461 76734 30532",
	   "-0.00000 00000 00000 00000 00000 00000 00000 07341 99880 33856",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00731 13688 37108",
	    "0.00000 00000 00000 00000 00000 00000 00000 00006 65251 03881",
	    "0.00000 00000 00000 00000 00000 00000 00000 00001 41940 11191",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00234 87748",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00232 32621",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00002 50026",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 32307",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00631",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00038",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00001"
	    },
	    {
	    "0.00000 24197 53613 61179 64945 79307 99978 19897 97564 31445",
	   "-0.00000 40283 80692 67601 28830 00852 62298 31629 84738 35511",
	    "0.00001 35738 01583 12178 13454 57533 10495 18567 29816 42291",
	   "-0.00003 66274 30474 20052 21850 30737 59647 91397 35458 83666",
	    "0.00004 51274 67954 56112 84850 58802 04198 09706 73437 76912",
	   "-0.00002 33637 49180 75876 15227 87733 78674 94067 00601 52672",
	   "-0.00000 37917 00292 08222 99108 69420 64652 40529 93783 40432",
	    "0.00001 02572 37070 28557 96481 16491 52654 52549 90838 32160",
	   "-0.00000 31689 29001 22484 22380 55899 54520 19328 99846 90849",
	   "-0.00000 10319 15903 98532 72272 86776 57544 15357 27111 01879",
	    "0.00000 06297 34532 76060 50786 41168 96876 69986 88644 23019",
	    "0.00000 00416 86604 88193 94903 88391 82411 01919 31491 08306",
	   "-0.00000 00537 86314 44658 43575 02020 28880 61201 47538 66058",
	   "-0.00000 00014 15344 67639 13293 47101 26806 33928 91732 57025",
	    "0.00000 00026 16924 26305 88468 22334 14640 99058 82687 41557",
	    "0.00000 00000 86322 05275 86130 15196 99710 52532 20626 06067",
	   "-0.00000 00000 78635 47640 79874 41169 80071 23003 50152 39095",
	   "-0.00000 00000 03981 58068 23744 62290 43263 48891 05734 19546",
	    "0.00000 00000 01527 29738 16746 16443 65105 19619 47837 15854",
	    "0.00000 00000 00107 88522 40603 83248 52561 39073 19048 18117",
	   "-0.00000 00000 00019 80895 73728 71650 89275 56977 17279 58950",
	   "-0.00000 00000 00001 85414 27835 01535 44679 77337 06120 86729",
	    "0.00000 00000 00000 17388 91294 57125 38274 92504 24926 55674",
	    "0.00000 00000 00000 02182 52090 26684 95930 17076 76411 65084",
	   "-0.00000 00000 00000 00100 19236 99865 50741 23944 01964 37315",
	   "-0.00000 00000 00000 00018 57874 54953 53617 20928 80993 59676",
	    "0.00000 00000 00000 00000 30760 92119 31602 60339 27665 54728",
	    "0.00000 00000 00000 00000 11877 85523 98865 04091 90012 13659",
	    "0.00000 00000 00000 00000 00045 80602 75225 68100 03614 60810",
	   "-0.00000 00000 00000 00000 00058 52729 89870 81926 05135 27643",
	   "-0.00000 00000 00000 00000 00001 17340 71024 99857 64142 73524",
	    "0.00000 00000 00000 00000 00000 22581 19341 30008 41533 00196",
	    "0.00000 00000 00000 00000 00000 00790 32610 70344 99600 94287",
	   "-0.00000 00000 00000 00000 00000 00068 54003 02148 23016 05985",
	   "-0.00000 00000 00000 00000 00000 00003 53473 24971 93191 86512",
	    "0.00000 00000 00000 00000 00000 00000 16152 38451 11428 69040",
	    "0.00000 00000 00000 00000 00000 00000 01204 72398 34897 83417",
	   "-0.00000 00000 00000 00000 00000 00000 00027 90612 84733 75341",
	   "-0.00000 00000 00000 00000 00000 00000 00003 29812 06351 62946",
	    "0.00000 00000 00000 00000 00000 00000 00000 02725 80116 96058",
	    "0.00000 00000 00000 00000 00000 00000 00000 00745 07478 86323",
	    "0.00000 00000 00000 00000 00000 00000 00000 00002 24139 82400",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00001 41013 86014",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 01781 97043",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00225 24683",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00004 94743",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 30360",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00983",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00034",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00002"
	    },
	    {
	   "-0.00000 68841 20503 02734 50464 61678 38197 25811 99444 30684",
	    "0.00001 35455 33780 52358 40787 11064 18706 61993 04913 93998",
	   "-0.00002 17540 23152 21147 69281 22088 64469 58296 52636 31740",
	    "0.00002 19947 55165 85995 83028 26621 51126 15048 55781 23332",
	   "-0.00001 01782 84429 93048 87269 38862 25127 55859 00385 46125",
	   "-0.00000 38363 10144 42745 01643 50318 98381 94483 19671 11373",
	    "0.00000 79196 29169 06357 19271 87869 34310 43663 71644 68478",
	   "-0.00000 35151 96700 43216 13500 40118 19412 94289 51863 87945",
	   "-0.00000 03734 79889 72624 76532 02202 63481 23077 27441 67754",
	    "0.00000 07600 05862 35439 53354 87465 83487 90019 84056 40210",
	   "-0.00000 01139 08784 42965 69870 82245 27118 61653 79820 57387",
	   "-0.00000 00661 43447 45943 31655 01067 71236 30928 36143 71583",
	    "0.00000 00155 40047 96612 31488 53865 93748 08616 32114 81422",
	    "0.00000 00036 23234 09330 98040 42098 51629 23181 46055 15384",
	   "-0.00000 00008 81317 55262 99377 56404 41223 74833 59498 71733",
	   "-0.00000 00001 46709 98190 01162 69847 33220 09222 93424 19314",
	    "0.00000 00000 27908 71227 12363 27429 05112 28592 63778 66500",
	    "0.00000 00000 04368 63944 60535 95677 35802 80954 81247 14459",
	   "-0.00000 00000 00539 73899 08013 26311 59128 57526 07726 63407",
	   "-0.00000 00000 00092 62633 46009 83158 46339 76752 53933 72800",
	    "0.00000 00000 00006 54313 49032 22681 55095 04111 34893 30789",
	    "0.00000 00000 00001 39808 29940 39760 03943 34567 37704 20690",
	   "-0.00000 00000 00000 04684 25717 71758 32438 53960 67365 02875",
	   "-0.00000 00000 00000 01532 69898 48153 13897 59760 93775 81291",
	    "0.00000 00000 00000 00011 17499 01875 44543 93309 39186 20007",
	    "0.00000 00000 00000 00012 50412 07183 83387 47334 53760 93297",
	    "0.00000 00000 00000 00000 15591 11027 51327 96855 08452 84653",
	   "-0.00000 00000 00000 00000 07751 97555 47983 23627 10236 56399",
	   "-0.00000 00000 00000 00000 00225 06761 63134 86007 04767 54281",
	    "0.00000 00000 00000 00000 00037 03799 08075 91632 07533 13189",
	    "0.00000 00000 00000 00000 00001 66976 01620 56056 73990 28104",
	   "-0.00000 00000 00000 00000 00000 13686 12196 76531 54908 64469",
	   "-0.00000 00000 00000 00000 00000 00872 90672 85976 21409 35864",
	    "0.00000 00000 00000 00000 00000 00038 47825 20643 39629 49644",
	    "0.00000 00000 00000 00000 00000 00003 51172 41137 34726 79520",
	   "-0.00000 00000 00000 00000 00000 00000 07669 68065 13064 04803",
	   "-0.00000 00000 00000 00000 00000 00000 01132 65635 85874 94906",
	    "0.00000 00000 00000 00000 00000 00000 00007 51939 04655 97091",
	    "0.00000 00000 00000 00000 00000 00000 00002 99788 94515 91468",
	    "0.00000 00000 00000 00000 00000 00000 00000 01524 92924 80856",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00660 24315 73341",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00010 06295 90014",
	    "0.00000 00000 00000 00000 00000 00000 00000 00001 21833 48644",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 03071 01144",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00188 25513",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00006 87110",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 24056",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 01244",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00024",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00002"
	    },
	    {
	   "-0.00000 02000 10251 73332 51027 15374 94088 21393 15136 19071",
	    "0.00000 27478 75445 60047 12023 61586 71599 58275 49348 62984",
	   "-0.00000 63539 01754 48107 93303 73621 62516 65088 09057 04745",
	    "0.00000 61092 14465 70387 32368 86858 39303 76715 52180 67220",
	   "-0.00000 10443 89166 71301 29573 54199 80515 30750 07693 40550",
	   "-0.00000 47245 91519 14535 87378 92254 95603 48357 00079 14394",
	    "0.00000 60374 95292 52658 06046 18847 42696 87220 03533 57458",
	   "-0.00000 30087 99217 85345 07615 64329 85611 49262 29022 88521",
	   "-0.00000 00017 38736 80462 07477 34264 79937 76808 96123 34723",
	    "0.00000 07045 81709 73958 10943 37790 22868 47494 05054 04702",
	   "-0.00000 02446 38283 33826 78668 96084 49220 69614 22779 37509",
	   "-0.00000 00366 48190 58159 21954 34310 87613 50255 57531 71340",
	    "0.00000 00333 51927 67091 53529 42073 16310 26163 73094 14643",
	   "-0.00000 00007 74280 84723 96860 11655 00926 31314 23690 91812",
	   "-0.00000 00022 37253 33674 46275 05608 65793 33717 05853 54060",
	    "0.00000 00001 34846 34487 79755 04149 83129 31907 21450 65827",
	    "0.00000 00000 95245 81564 19560 50556 97858 67116 81001 47949",
	   "-0.00000 00000 05135 48118 12690 14544 47420 42355 15107 23123",
	   "-0.00000 00000 02772 57974 10706 80108 26809 33336 21170 80285",
	    "0.00000 00000 00090 21412 02849 01953 90394 27088 34719 51164",
	    "0.00000 00000 00056 64873 23277 31370 90095 04247 48049 27753",
	   "-0.00000 00000 00000 54439 66659 04958 84764 11035 36560 76763",
	   "-0.00000 00000 00000 82869 94363 83080 91093 53994 01205 83428",
	   "-0.00000 00000 00000 00877 70778 56500 68304 36711 29048 36232",
	    "0.00000 00000 00000 00886 29188 84245 35191 18700 87906 09637",
	    "0.00000 00000 00000 00024 87338 93748 77221 00292 35154 53111",
	   "-0.00000 00000 00000 00007 06320 09941 91928 55176 95540 94142",
	   "-0.00000 00000 00000 00000 31277 71304 03536 44064 06488 65497",
	    "0.00000 00000 00000 00000 04249 97771 81964 14544 07807 66204",
	    "0.00000 00000 00000 00000 00261 21183 03863 81995 13912 19411",
	   "-0.00000 00000 00000 00000 00019 34422 69225 28126 55000 29750",
	   "-0.00000 00000 00000 00000 00001 61109 84857 10036 81057 91010",
	    "0.00000 00000 00000 00000 00000 06513 56248 30117 46949 20131",
	    "0.00000 00000 00000 00000 00000 00771 65106 17734 30440 89520",
	   "-0.00000 00000 00000 00000 00000 00014 71798 53367 35764 85204",
	   "-0.00000 00000 00000 00000 00000 00002 95684 36851 81637 74345",
	    "0.00000 00000 00000 00000 00000 00000 01135 48296 02129 12023",
	    "0.00000 00000 00000 00000 00000 00000 00924 18192 96848 34874",
	    "0.00000 00000 00000 00000 00000 00000 00007 60710 50040 70620",
	   "-0.00000 00000 00000 00000 00000 00000 00002 38561 26649 79935",
	   "-0.00000 00000 00000 00000 00000 00000 00000 04510 28551 99320",
	    "0.00000 00000 00000 00000 00000 00000 00000 00511 77082 87392",
	    "0.00000 00000 00000 00000 00000 00000 00000 00015 14546 38879",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 91127 25348",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 03825 35878",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00132 81197",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00007 85476",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 15152",
	   "-0.00000 00000 00000 00000 00000 00000 00000 00000 00000 01357",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00012",
	    "0.00000 00000 00000 00000 00000 00000 00000 00000 00000 00002"
	    }
    };
    private static mpfr_t[][] c;
    private static mpfr_t[] CZ;

    // temporary variables used by theta, Z, computeNumberOfTerms, computeNumberOfZeroes
    private static mpfr_t t1;
    private static mpfr_t t2;
    private static mpfr_t t3;
    private static mpfr_t u;
    private static mpfr_t v;
    private static mpfr_t x1;
    private static mpfr_t y1;
    private static mpfr_t sumx;
    private static mpfr_t sumy;
    private static mpfr_t t4;
    private static mpfr_t t5;
    private static mpfr_t thetax;
    private static mpfr_t thetay;

    /**
     * Constructor: initialize member variables, initialize constants.
     */
    public RiemannSiegelZeta()
	throws MPFRException, Exception
    {	
	this.numZeroes = 0;
	thetaEvals = 0;
	zetaEvals = 0;
	epsilon = new mpfr_t();
	pi = new mpfr_t();
	piby2 = new mpfr_t();
	piby8 = new mpfr_t();
	log2 = new mpfr_t();
	MPFR.mpfr_const_pi(pi, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_ui(piby2, pi, 2, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_ui(piby8, pi, 8, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_const_log2(log2, mpfr_rnd_t.MPFR_RNDN);
	t1 = new mpfr_t();
	t2 = new mpfr_t();
	t3 = new mpfr_t();
	t4 = new mpfr_t();
	t5 = new mpfr_t();
	x1 = new mpfr_t();
	y1 = new mpfr_t();
	sumx = new mpfr_t();
	sumy = new mpfr_t();
	u = new mpfr_t();
	v = new mpfr_t();
	thetax = new mpfr_t();
	thetay = new mpfr_t();
    }
    
    @Override
    public void setPrecision(int precision)
	throws MPFRException, Exception
    {
        this.precision = precision;
        MPFR.mpfr_set_ui(epsilon, 1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_div_2si(epsilon, epsilon, precision - 2, mpfr_rnd_t.MPFR_RNDN);
        this.digits = (int)((double)(precision - 2)*0.301029995664 /* log10(2) */);
        if (this.digits > 50) {
    	    throw new Exception("precision cannot be greater than 50 digits");
        }
    }

    /**
     * Initialize array of logarithms.
     * logs[i] = ln(i+1) for i = 0,...,n-1
     */
    private void initLogs(int n)
        throws MPFRException
    {
	int i;
	logs = new mpfr_t[n];
	mpfr_t t = new mpfr_t();
	for (i = 0; i < n; i++) {
	    logs[i] = new mpfr_t();
	    MPFR.mpfr_set_ui(t, i + 1, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_log(logs[i], t, mpfr_rnd_t.MPFR_RNDN);
	}
    }

    /**
     * Initialize array of square roots.
     * sqrts[i] = sqrt(i+1) for i = 0,...,n-1
     */
    private void initSqrts(int n)
        throws MPFRException
    {
	int i;
	sqrts = new mpfr_t[n];
	mpfr_t t = new mpfr_t();
	for (i = 0; i < n; i++) {
	    sqrts[i] = new mpfr_t();
	    MPFR.mpfr_set_ui(t, i + 1, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_sqrt(sqrts[i], t, mpfr_rnd_t.MPFR_RNDN);
	}	
    }
    
    /**
     * Initialize basic functions.  In this case logarithms and square roots.
     */
    public void initBasicFunctions(int n, mpfr_t tmin, mpfr_t tmax)
	throws MPFRException
    {
        mpfr_t x = new mpfr_t();
        int N;

        MPFR.mpfr_div(x, tmax, pi, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_div_2si(x, x, 1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_sqrt(x, x, mpfr_rnd_t.MPFR_RNDN);
        N = MPFR.mpfr_get_si(x, mpfr_rnd_t.MPFR_RNDD);
        initLogs(N);
        initSqrts(N);
    }

    /**
     * Pre-compute coefficients used by CZ.
     */
    public void initCoefficients(int n)
	throws MPFRException, Exception
    {
	String[] s;
	CZ = new mpfr_t[n];
	c = new mpfr_t[n][];
        for (int i = 0; i < n; i++) {
            CZ[i] = new mpfr_t();
            s = c_strs[i];
            c[i] = new mpfr_t[s.length];
            for (int j = 0; j < s.length; j++) {
        	c[i][j] = new mpfr_t();
        	MPFR.mpfr_set_str(c[i][j], s[j].replace(" ", ""), 10, mpfr_rnd_t.MPFR_RNDN);
            }
        }
    }

    /**
     * Pre-compute coefficients used by theta.
     * C[n]=(1/2 - 1/2^2*n)*(1/((2*n-1)*2*n)*abs(B[2*n]) where B[i] is the i-th Bernoulli number.
     */
    public void initThetaCoefficients()
	throws MPFRException
    {
	mpfr_t c = new mpfr_t();
	mpfr_t d = new mpfr_t();
	int i;

	C = new mpfr_t[Bnums.length - 1];
	tpowers = new mpfr_t[Bnums.length - 1];

	MPFR.mpfr_set_si(c, 1, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_2si(c, c, 1, mpfr_rnd_t.MPFR_RNDN);
	for (i = 1; i < Bnums.length; i++) {
	    C[i-1] = new mpfr_t();
	    MPFR.mpfr_set_si(d, 1, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_div_2si(d, d, 2*i, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_sub(d, c, d, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_mul_si(d, d, Bnums[i], mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_div_si(d, d, Bdens[i], mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_div_si(d, d, 2*i - 1, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_div_si(d, d, 2*i, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_set(C[i-1], d, mpfr_rnd_t.MPFR_RNDN);
	    tpowers[i-1] = new mpfr_t();
	}
    }

    /**
     * Compute y = poly(x), where poly is the polynomial function:
     * a[m]*x^m + a[m-1]*x^(m-1) + ... + a[1]*x + a[0].
     * Uses Horner's method.
     */
    private static void poly(int m, mpfr_t[] a, mpfr_t x, mpfr_t t, mpfr_t y, mpfr_rnd_t rnd)
        throws MPFRException
    {
	int i;

	MPFR.mpfr_set_si(t, 0, rnd);
	i = m - 1;
	while (i >= 0) {
	    MPFR.mpfr_mul(t, t, x, rnd);
	    MPFR.mpfr_add(t, t, a[i], rnd);
	    i--;
	}
	MPFR.mpfr_set(y, t, rnd);	
    }
    
    /**
     * Compute high-order terms of the Riemann-Siegel theta function for t >> 1.
     * Used by function theta.  Does not initialize r.
     */
    private void theta_high_order_terms(mpfr_t r, mpfr_t t)
	throws MPFRException
    {
	MPFR.mpfr_sub(r, r, piby8, mpfr_rnd_t.MPFR_RNDN);
	
	MPFR.mpfr_set(v,  t, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_2si(v, v, 1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_sub(r, r, v, mpfr_rnd_t.MPFR_RNDN);
        
	MPFR.mpfr_set(u, t, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_2si(u, u, 1, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div(u, u, pi, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_log(u, u, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_mul(v, v, u, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_add(r, r, v, mpfr_rnd_t.MPFR_RNDN);	
    }

    /**
     * Approximate the Riemann-Siegel theta function for t >> 1.
     * Reference: Dissertation: NEUE HERLEITUNG UND EXPLIZITE RESTABSCHATZUNG DER RIEMANN-SIEGEL-FORMEL,
     * Wolfgang Gabcke, Gottingen 1979, Page 2.
     */
    private void theta(mpfr_t r, mpfr_t t, int nterms)
        throws MPFRException
    {
	int i;
	
	thetaEvals++;
	MPFR.mpfr_sqr(t2, t, mpfr_rnd_t.MPFR_RNDN);	
	for (i = 0; i < nterms; i++) {
	    if (i == 0) {
		MPFR.mpfr_set_si(tpowers[i], 1, mpfr_rnd_t.MPFR_RNDN);
		MPFR.mpfr_div(tpowers[i], tpowers[i], t, mpfr_rnd_t.MPFR_RNDN);
	    } else {
		MPFR.mpfr_div(tpowers[i], tpowers[i-1], t2, mpfr_rnd_t.MPFR_RNDN);
	    }
	}
	MPFR.mpfr_set_ui(r, 0, mpfr_rnd_t.MPFR_RNDN);
	for (i = nterms - 1; i >= 0; i--) {
	    MPFR.mpfr_mul(v, C[i], tpowers[i], mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_add(r, r, v, mpfr_rnd_t.MPFR_RNDN);
	}

	theta_high_order_terms(r, t);
    }

    /**
     * Initialize a list of Gram points between lb and ub.
     * Gram points are found by binary search for solutions to theta(t) = n*pi.
     */
    public void initGramPoints(int lb, int ub, int nt)
	throws MPFRException
    {
	ArrayList<mpfr_t> points = new ArrayList<mpfr_t>();
	int i = 0;
	mpfr_t s = new mpfr_t();
	mpfr_t a = new mpfr_t();
	mpfr_t b = new mpfr_t();
	mpfr_t d = new mpfr_t();
	mpfr_t mid = new mpfr_t();
	mpfr_t r = new mpfr_t();
	mpfr_t p;
	MPFR.mpfr_neg(s, pi, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_set_si(a, lb, mpfr_rnd_t.MPFR_RNDN);
	theta(r, a, nt);
	for (;;) {
	    if (MPFR.mpfr_cmp(r, s) < 0) {
	        break;
	    }
	    MPFR.mpfr_add(s, s, pi, mpfr_rnd_t.MPFR_RNDN);
	    i++;
	}
	gramBaseIndex = i - 1;	    
	for (;;) {
	    p = new mpfr_t();
            for (;;) {
        	MPFR.mpfr_add_si(b, a, 1, mpfr_rnd_t.MPFR_RNDN);
        	theta(r, b, nt);
        	if (MPFR.mpfr_cmp(r, s) > 0) {
        	    break;
        	}
        	MPFR.mpfr_set(a, b, mpfr_rnd_t.MPFR_RNDN);
            }
            // now we have theta(a) < s < theta(b)
            for (;;) {
        	MPFR.mpfr_add(mid, a, b, mpfr_rnd_t.MPFR_RNDN);
        	MPFR.mpfr_div_si(mid, mid, 2, mpfr_rnd_t.MPFR_RNDN);
        	theta(r, mid, nt);
        	if (MPFR.mpfr_cmp(r, s) < 0) {
        	    MPFR.mpfr_set(a, mid, mpfr_rnd_t.MPFR_RNDD);
        	} else {
        	    MPFR.mpfr_set(b, mid, mpfr_rnd_t.MPFR_RNDU);
        	}
        	MPFR.mpfr_div(d, a, b, mpfr_rnd_t.MPFR_RNDN);
        	MPFR.mpfr_d_sub(d, 1.0, d, mpfr_rnd_t.MPFR_RNDN);
        	if (MPFR.mpfr_cmp_d(d, 0.00001) < 0) { // 1E-5
        	    break;
        	}
            }
            MPFR.mpfr_set(p, a, mpfr_rnd_t.MPFR_RNDN);
            if (MPFR.mpfr_cmp_si(p, ub) > 0) {
        	break;
            }
            points.add(p);
            MPFR.mpfr_add(s, s, pi, mpfr_rnd_t.MPFR_RNDN);
            i++;
	}
	gramPoints = points.toArray(new mpfr_t[0]);
	numGramPoints = points.size();
        zeroStr = new StringBuffer[numGramPoints + 1];
        for (i = 0; i <= numGramPoints; i++) {
            zeroStr[i] = new StringBuffer();
        }
    }

    /**
     * Returns the number of Gram points computed by initGramPoints.
     */
    public int getNumberOfGramPoints()
    {
	return this.numGramPoints;
    }
    
    /**
     * Returns the index of the first Gram point computed by initGramPoints.
     */
    public int getGramBaseIndex()
    {
	return this.gramBaseIndex;
    }
    
    /**
     * Returns the i-th Gram point computed by initGramPoints.
     */
    public mpfr_t getGramPoint(int i)
	throws MPFRException
    {
	return this.gramPoints[i];
    }

    /**
     * Compute Z(t) = exp(i*theta(t)) * zeta(0.5 + i*t) for t > 0
     * using the Riemann-Siegel formula for Z(t).
     */
    public void Z(mpfr_t r, mpfr_t t, int n, int nt)
	throws MPFRException, Exception
    {
        int N;
        int i;

        zetaEvals++;
        MPFR.mpfr_div(x1, t, pi, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_div_2si(x1, x1, 1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_sqrt(x1, x1, mpfr_rnd_t.MPFR_RNDN);
        N = MPFR.mpfr_get_si(x1, mpfr_rnd_t.MPFR_RNDD);
        MPFR.mpfr_sub_si(y1, x1, N, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_mul_2si(y1, y1, 1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_neg(y1, y1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_add_si(y1, y1, 1, mpfr_rnd_t.MPFR_RNDN);

        theta(t4, t, nt);
	        
	MPFR.mpfr_set_si(r, 0, mpfr_rnd_t.MPFR_RNDN);
        for (i = N - 1; i >= 0; i--) {
            MPFR.mpfr_mul(t5, t, logs[i], mpfr_rnd_t.MPFR_RNDN);
            MPFR.mpfr_neg(t5, t5, mpfr_rnd_t.MPFR_RNDN);
            MPFR.mpfr_add(t5, t5, t4, mpfr_rnd_t.MPFR_RNDN);
    	    MPFR.mpfr_sin_cos(thetay, thetax, t5, mpfr_rnd_t.MPFR_RNDN);
    	    MPFR.mpfr_div(sumx, thetax, sqrts[i], mpfr_rnd_t.MPFR_RNDN);
    	    MPFR.mpfr_add(r, r, sumx, mpfr_rnd_t.MPFR_RNDN);
        }
        MPFR.mpfr_mul_2si(r, r, 1, mpfr_rnd_t.MPFR_RNDN);
	        
        MPFR.mpfr_sqr(t4, y1, mpfr_rnd_t.MPFR_RNDN);
        for (i = 0; i < n; i++) {
            poly(c[i].length, c[i], t4, t5, CZ[i], mpfr_rnd_t.MPFR_RNDN);
            if (i % 2 != 0) {
        	MPFR.mpfr_mul(CZ[i], CZ[i], y1, mpfr_rnd_t.MPFR_RNDN);
            }
        }
        MPFR.mpfr_ui_div(t4, 1, x1, mpfr_rnd_t.MPFR_RNDN);
        poly(CZ.length, CZ, t4, t5, sumx, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_sqrt(x1, x1, mpfr_rnd_t.MPFR_RNDN);
        MPFR.mpfr_div(sumx, sumx, x1, mpfr_rnd_t.MPFR_RNDN);
        if (N % 2 == 0) {
            MPFR.mpfr_neg(sumx, sumx, mpfr_rnd_t.MPFR_RNDN);
        }
	MPFR.mpfr_add(r, r, sumx, mpfr_rnd_t.MPFR_RNDN);
    }

    /**
     * Append a base 10 string representation of an mpfr_t to StringBuffer result.  The number of
     * digits is based on the desired precision.
     */
    private void appendMPFRvalue(StringBuffer sb, mpfr_t value)
        throws MPFRException
    {
        GMP.MutableInteger exp = new GMP.MutableInteger(0);
	String str = MPFR.mpfr_get_str(exp, value, 10, this.digits, mpfr_rnd_t.MPFR_RNDN);
	if (str.startsWith("-")) {
	    sb.append("-0.");
	    sb.append(str.substring(1));
	} else {
	    sb.append("0.");
	    sb.append(str);
	}
	sb.append("E");
	sb.append(Integer.toString(exp.value));	
    }
    
    /**
     * Append a base 10 string representation of an mpfr_t to StringBuffer result.  The number of
     * digits is given by ndigits.
     */
    private void appendMPFRvalue(StringBuffer sb, mpfr_t value, int ndigits)
        throws MPFRException
    {
        GMP.MutableInteger exp = new GMP.MutableInteger(0);
	String str = MPFR.mpfr_get_str(exp, value, 10, ndigits, mpfr_rnd_t.MPFR_RNDN);
	if (str.startsWith("-")) {
	    sb.append("-0.");
	    sb.append(str.substring(1));
	} else {
	    sb.append("0.");
	    sb.append(str);
	}
	sb.append("E");
	sb.append(Integer.toString(exp.value));	
    }

    /**
     * Compute a zero of zeta(0.5 + i*t) with a0 < t < b0.
     * If there is a sign change of Z in the interval then linear interpolation is used to locate a zero.
     * @return true iff a zero was found in the interval.
     */
    public boolean computeZetaZero(int i, mpfr_t a0, mpfr_t b0, int n, int nt)
	throws MPFRException, Exception
    {
	mpfr_t a = new mpfr_t();
	mpfr_t b = new mpfr_t();
	mpfr_t d = new mpfr_t();
	mpfr_t mid = new mpfr_t();
	mpfr_t zmid = new mpfr_t();
	mpfr_t za = new mpfr_t();
	mpfr_t zb = new mpfr_t();
	boolean up = false; // true if Z(a) < 0 < Z(b); false if Z(a) > 0 > Z(b) 

	MPFR.mpfr_set(a, a0, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_set(b, b0, mpfr_rnd_t.MPFR_RNDN);
	Z(za, a, n, nt);
	Z(zb, b, n, nt);
	if (MPFR.mpfr_cmp_ui(za, 0) < 0 && MPFR.mpfr_cmp_ui(zb, 0) > 0) {
	    up = true;
	} else if (MPFR.mpfr_cmp_ui(za, 0) > 0 && MPFR.mpfr_cmp_ui(zb, 0) < 0) {
	    up = false;
	} else {
	    this.zeroStr[i].append("[");
	    appendMPFRvalue(this.zeroStr[i], a);
	    this.zeroStr[i].append(", ");
	    appendMPFRvalue(this.zeroStr[i], b);
	    this.zeroStr[i].append("]");
	    return false;
	}
	for (;;) {
	    // set mid to the zero of the line between (a, Z(a)) and (b, Z(b))
            MPFR.mpfr_sub(mid, b, a, mpfr_rnd_t.MPFR_RNDN);
            MPFR.mpfr_div(d, zb, za, mpfr_rnd_t.MPFR_RNDN);
            MPFR.mpfr_d_sub(d, 1.0, d, mpfr_rnd_t.MPFR_RNDN);
            if (MPFR.mpfr_cmp_d(d, 1.0) <= 0) {
        	throw new Exception("computeZetaZero: 1 - zb/za <= 1");        	
            }
            MPFR.mpfr_div(mid, mid, d, mpfr_rnd_t.MPFR_RNDN);
            MPFR.mpfr_add(mid, mid, a, mpfr_rnd_t.MPFR_RNDN);
            // if a == mid or b == mid, we take mid as the average of a and b
            if (MPFR.mpfr_cmp(a, mid) == 0 || MPFR.mpfr_cmp(b, mid) == 0) {
        	MPFR.mpfr_add(mid, a, b, mpfr_rnd_t.MPFR_RNDN);
        	MPFR.mpfr_div_2si(mid, mid, 1, mpfr_rnd_t.MPFR_RNDN);
            }
            Z(zmid, mid, n, nt);
            if (up == (MPFR.mpfr_cmp_ui(zmid, 0) < 0)) {
        	MPFR.mpfr_set(a, mid, mpfr_rnd_t.MPFR_RNDD);
        	MPFR.mpfr_set(za, zmid, (up ? mpfr_rnd_t.MPFR_RNDD : mpfr_rnd_t.MPFR_RNDU));
            } else {
        	MPFR.mpfr_set(b, mid, mpfr_rnd_t.MPFR_RNDU);
        	MPFR.mpfr_set(zb, zmid, (up ? mpfr_rnd_t.MPFR_RNDU : mpfr_rnd_t.MPFR_RNDD));
            }
            MPFR.mpfr_div(d, a, b, mpfr_rnd_t.MPFR_RNDN);
            MPFR.mpfr_d_sub(d, 1.0, d, mpfr_rnd_t.MPFR_RNDN);
            // break if the relative difference between a and b is within epsilon
            if (MPFR.mpfr_cmp(d, epsilon) < 0) {
        	break;
            }
        }
	appendMPFRvalue(this.zeroStr[i], a);
	this.numZeroes++;
	return true;
    }
    
    /**
     * Returns the total number of zeroes computed by computeZetaZero.
     */
    public int getNumberOfZeroes()
    {
	return this.numZeroes;
    }

    /**
     * Compute the number of low-order terms needed in Z for the desired precision.
     * Reference: Dissertation: NEUE HERLEITUNG UND EXPLIZITE RESTABSCHATZUNG DER RIEMANN-SIEGEL-FORMEL,
     * Wolfgang Gabcke, Gottingen 1979, Page 3.
     */
    public int computeNumberOfTerms(mpfr_t tmin, mpfr_t tmax)
	throws MPFRException, Exception
    {
	int n = 1;
	mpfr_t x = new mpfr_t();
	mpfr_t y = new mpfr_t();
	mpfr_t z = new mpfr_t();
		
	MPFR.mpfr_sqrt(x, tmin, mpfr_rnd_t.MPFR_RNDN); // x = tmin^(1/2)
	MPFR.mpfr_sqrt(y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(1/4)
	MPFR.mpfr_ui_div(x, 1, x, mpfr_rnd_t.MPFR_RNDN); // x = tmin^(-1/2)
	MPFR.mpfr_ui_div(y, 1, y, mpfr_rnd_t.MPFR_RNDN); // y = tmin^(-1/4)
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-3/4)
	MPFR.mpfr_mul_d(z, y, 0.127, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-5/4)
	MPFR.mpfr_mul_d(z, y, 0.053, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-7/4)
	MPFR.mpfr_mul_d(z, y, 0.011, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-9/4)
	MPFR.mpfr_mul_d(z, y, 0.031, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-11/4)
	MPFR.mpfr_mul_d(z, y, 0.017, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-13/4)
	MPFR.mpfr_mul_d(z, y, 0.061, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-15/4)
	MPFR.mpfr_mul_d(z, y, 0.661, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-17/4)
	MPFR.mpfr_mul_d(z, y, 9.2, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-19/4)
	MPFR.mpfr_mul_d(z, y, 130.0, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-21/4)
	MPFR.mpfr_mul_d(z, y, 1837.0, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
	MPFR.mpfr_mul(y, y, x, mpfr_rnd_t.MPFR_RNDN);    // y = tmin^(-23/4)
	MPFR.mpfr_mul_d(z, y, 25966.0, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_cmp(z, epsilon) < 0) {
	    return n;
	}
	n++;
        if (n > 11) {
    	    throw new Exception("precision too large for number of low-order terms");
        }
	return n;
    }

    /**
     * Compute the number of low-order terms needed in the theta function for the desired precision.
     */
    public int computeNumberOfThetaTerms(mpfr_t tmin)
	throws MPFRException
    {
	int i;
	int n = 0;
	mpfr_t tp = new mpfr_t();
	mpfr_t x = new mpfr_t();
	mpfr_t y = new mpfr_t();
	mpfr_t d = new mpfr_t();

	MPFR.mpfr_set_si(y, 0, mpfr_rnd_t.MPFR_RNDN);
	theta_high_order_terms(y, tmin);
	MPFR.mpfr_sqr(t2, tmin, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_set_si(tp, 1, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div(tp, tp, tmin, mpfr_rnd_t.MPFR_RNDN);
	for (i = 0; i < C.length; i++) {
	    MPFR.mpfr_mul(x, C[i], tp, mpfr_rnd_t.MPFR_RNDN);
    	    MPFR.mpfr_div(d, x, y, mpfr_rnd_t.MPFR_RNDN);
	    MPFR.mpfr_abs(d, d, mpfr_rnd_t.MPFR_RNDN);
	    if (MPFR.mpfr_cmp(d, epsilon) < 0) break;
	    MPFR.mpfr_div(tp, tp, t2, mpfr_rnd_t.MPFR_RNDN);
	    n++;
	}
	return n;
    }

    /**
     * Compute an estimate of N(T), the number of zeroes of zeta(0.5 + i*y) for i in [0,t]
     * from Backlund.
     * Reference: Riemann's Zeta Function, H. M. Edwards, Dover Publications Inc. 2001.
     */
    public long computeNumberOfZeroes(mpfr_t error, mpfr_t t)
	throws MPFRException, Exception
    {
	long n;
	mpfr_t nt = new mpfr_t();
		
	// hard-code the first few estimates
	if (MPFR.mpfr_cmp_d(t, 14.134725142) < 0) {
	    n = 0;
	    MPFR.mpfr_set_si(error, 0, mpfr_rnd_t.MPFR_RNDN);
	    return n;
	} else if (MPFR.mpfr_cmp_d(t, 21.022039639) < 0) {
	    n = 1;
	    MPFR.mpfr_set_si(error, 0, mpfr_rnd_t.MPFR_RNDN);
	    return n;
	} else if (MPFR.mpfr_cmp_d(t, 25.010857580) < 0) {
	    n = 2;
	    MPFR.mpfr_set_si(error, 0, mpfr_rnd_t.MPFR_RNDN);
	    return n;
	}
	// find the largest Gram point less than the bound and, if the index is 126 or less,
	// use the well known property of Gram's Law
	int i = 0;
	while (i < numGramPoints) {
	    if (MPFR.mpfr_cmp(gramPoints[i], t) >= 0) {
		break;
	    }
	    i++;
	}
	if (gramBaseIndex + i <= 126) {
	    n = gramBaseIndex + i;
	    MPFR.mpfr_set_si(error, 1, mpfr_rnd_t.MPFR_RNDN);
	    return n;
	}
	// otherwise use Backlund's estimate
	MPFR.mpfr_set(v,  t, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_ui(v, v, 2, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div(v, v, pi, mpfr_rnd_t.MPFR_RNDN);
        
	MPFR.mpfr_set(u, t, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div_ui(u, u, 2, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_div(u, u, pi, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_log(u, u, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_mul(u, u, v, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_set(nt, u, mpfr_rnd_t.MPFR_RNDN);
	
	MPFR.mpfr_sub(nt, nt, v, mpfr_rnd_t.MPFR_RNDN);
	
	MPFR.mpfr_add_d(nt, nt, 0.875, mpfr_rnd_t.MPFR_RNDN);

	n = MPFR.mpfr_get_ui(nt, mpfr_rnd_t.MPFR_RNDN);
	if (MPFR.mpfr_erangeflag_p() != 0) {
	    throw new Exception("Overflow in computeNumberOfZeroes");
	}

	MPFR.mpfr_set(v,  t, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_log(v, v, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_mul_d(error, v, 0.137, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_log(v, v, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_mul_d(v, v, 0.443, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_add(error, error, v, mpfr_rnd_t.MPFR_RNDN);
	MPFR.mpfr_add_d(error, error, 4.35, mpfr_rnd_t.MPFR_RNDN);
	return n;
    }

    /**
     * Returns a string result for the i-th call to computeZetaZero.
     */
    public String getZeroStr(int i)
    {
	return this.zeroStr[i].toString();
    }
    
    /**
     * Returns the total number of evaluations of Z.
     */
    public int getNumberOfZEvals()
    {
	return this.zetaEvals;
    }
    
    /**
     * Returns the total number of evaluations of theta.
     */
    public int getNumberOfThetaEvals()
    {
	return this.thetaEvals;
    }

}
